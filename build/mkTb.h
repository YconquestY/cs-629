/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
 * 
 * On Mon Mar 11 12:45:23 CET 2024
 * 
 */

/* Generation options: */
#ifndef __mkTb_h__
#define __mkTb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTb module */
class MOD_mkTb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST__enq_RL_mma_load_row_a_store_row_c$EN_mma_m_c;
  MOD_Wire<tUInt8> INST__enq_RL_mma_store_row_c_patch$EN_mma_m_c;
  MOD_Wire<tUInt8> INST__i_notFull_RL_mma_load_row_a_store_row_c$EN_mma_m_c;
  MOD_Wire<tUInt8> INST__i_notFull_RL_mma_store_row_c_patch$EN_mma_m_c;
  MOD_Wire<tUInt8> INST__put_RL_mma_load_row_a_store_row_c$EN_mma_m_a_memory;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_busy;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_col_idx;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_row_a;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_row_a_idx;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_row_a_state;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_row_b;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_row_b_idx;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_row_b_state;
  MOD_Wire<tUInt8> INST__read_RL_mma_compute$EN_mma_row_c;
  MOD_Wire<tUInt8> INST__read_RL_mma_load_row_a_store_row_c$EN_mma_busy;
  MOD_Wire<tUInt8> INST__read_RL_mma_load_row_a_store_row_c$EN_mma_m_a_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST__read_RL_mma_load_row_a_store_row_c$EN_mma_row_a_idx;
  MOD_Wire<tUInt8> INST__read_RL_mma_load_row_a_store_row_c$EN_mma_row_a_state;
  MOD_Wire<tUInt8> INST__read_RL_mma_load_row_a_store_row_c$EN_mma_row_c;
  MOD_Wire<tUInt8> INST__read_RL_mma_store_row_c_patch$EN_mma_row_a_idx;
  MOD_Wire<tUInt8> INST__read_RL_mma_store_row_c_patch$EN_mma_row_c;
  MOD_Wire<tUInt8> INST__write_RL_mma_compute$EN_mma_busy;
  MOD_Wire<tUInt8> INST__write_RL_mma_compute$EN_mma_col_idx;
  MOD_Wire<tUInt8> INST__write_RL_mma_compute$EN_mma_row_a_idx;
  MOD_Wire<tUInt8> INST__write_RL_mma_compute$EN_mma_row_a_state;
  MOD_Wire<tUInt8> INST__write_RL_mma_compute$EN_mma_row_b_idx;
  MOD_Wire<tUInt8> INST__write_RL_mma_compute$EN_mma_row_b_state;
  MOD_Wire<tUInt8> INST__write_RL_mma_compute$EN_mma_row_c;
  MOD_Wire<tUInt8> INST__write_RL_mma_load_row_a_store_row_c$EN_mma_row_a_state;
  MOD_Wire<tUInt8> INST__write_RL_mma_load_row_a_store_row_c$EN_mma_row_c;
  MOD_Wire<tUInt8> INST__write_RL_mma_store_row_c_patch$EN_mma_row_a_idx;
  MOD_Wire<tUInt8> INST__wset_RL_mma_load_row_a_store_row_c$EN_mma_m_a_serverAdapter_writeWithResp;
  MOD_Reg<tUInt32> INST_ctr;
  MOD_Reg<tUInt32> INST_ctr_fsm;
  MOD_Reg<tUInt8> INST_going;
  MOD_Reg<tUInt8> INST_mma_busy;
  MOD_Reg<tUInt8> INST_mma_col_idx;
  MOD_BRAM<tUInt8,tUWide,tUInt8> INST_mma_m_a_memory;
  MOD_Reg<tUInt8> INST_mma_m_a_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_mma_m_a_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_mma_m_a_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_mma_m_a_serverAdapter_cnt_3;
  MOD_Reg<tUInt8> INST_mma_m_a_serverAdapter_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_mma_m_a_serverAdapter_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_mma_m_a_serverAdapter_outData_dequeueing;
  MOD_Wire<tUWide> INST_mma_m_a_serverAdapter_outData_enqw;
  MOD_Fifo<tUWide> INST_mma_m_a_serverAdapter_outData_ff;
  MOD_Reg<tUInt8> INST_mma_m_a_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_mma_m_a_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_mma_m_a_serverAdapter_writeWithResp;
  MOD_BRAM<tUInt8,tUWide,tUInt8> INST_mma_m_b_memory;
  MOD_Reg<tUInt8> INST_mma_m_b_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_mma_m_b_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_mma_m_b_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_mma_m_b_serverAdapter_cnt_3;
  MOD_Reg<tUInt8> INST_mma_m_b_serverAdapter_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_mma_m_b_serverAdapter_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_mma_m_b_serverAdapter_outData_dequeueing;
  MOD_Wire<tUWide> INST_mma_m_b_serverAdapter_outData_enqw;
  MOD_Fifo<tUWide> INST_mma_m_b_serverAdapter_outData_ff;
  MOD_Reg<tUInt8> INST_mma_m_b_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_mma_m_b_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_mma_m_b_serverAdapter_writeWithResp;
  MOD_Fifo<tUWide> INST_mma_m_c;
  MOD_Reg<tUWide> INST_mma_row_a;
  MOD_Reg<tUInt8> INST_mma_row_a_idx;
  MOD_Reg<tUInt8> INST_mma_row_a_state;
  MOD_Reg<tUWide> INST_mma_row_b;
  MOD_Reg<tUInt8> INST_mma_row_b_idx;
  MOD_Reg<tUInt8> INST_mma_row_b_state;
  MOD_Reg<tUWide> INST_mma_row_c;
  MOD_Wire<tUInt8> INST_test_fsm_abort;
  MOD_Reg<tUInt8> INST_test_fsm_start_reg;
  MOD_Reg<tUInt8> INST_test_fsm_start_reg_1;
  MOD_Wire<tUInt8> INST_test_fsm_start_reg_2;
  MOD_Wire<tUInt8> INST_test_fsm_start_wire;
  MOD_Reg<tUInt8> INST_test_fsm_state_can_overlap;
  MOD_Reg<tUInt8> INST_test_fsm_state_fired;
  MOD_Wire<tUInt8> INST_test_fsm_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_test_fsm_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_test_fsm_state_overlap_pw;
  MOD_Wire<tUInt8> INST_test_fsm_state_set_pw;
  MOD_Reg<tUInt8> INST_test_number;
  MOD_RegFile<tUInt8,tUWide> INST_tests;
  MOD_Reg<tUInt8> INST_verbose;
 
 /* Constructor */
 public:
  MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l54c13;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l43c16;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l38c13;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l31c16;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l26c13;
  tUInt8 DEF_WILL_FIRE_RL_mma_store_row_c_patch;
  tUInt8 DEF_WILL_FIRE_RL_mma_load_row_a_store_row_c;
  tUInt32 DEF_x__h119047;
  tUInt8 DEF_x__h41363;
  tUInt8 DEF_b__h11927;
  tUInt8 DEF_b__h4797;
  tUInt8 DEF_mma_row_b_state__h32147;
  tUInt8 DEF_mma_row_a_state__h20712;
  tUInt8 DEF_mma_m_b_serverAdapter_s1___d84;
  tUInt8 DEF_mma_m_a_serverAdapter_s1___d36;
  tUInt8 DEF_mma_busy__h20705;
  tUInt8 DEF_mma_m_c_i_notFull____d103;
  tUInt8 DEF_mma_m_b_serverAdapter_cnt_3_whas____d63;
  tUInt8 DEF_mma_m_b_serverAdapter_cnt_2_whas____d61;
  tUInt8 DEF_mma_m_b_serverAdapter_cnt_1_whas____d60;
  tUInt8 DEF_mma_m_b_serverAdapter_outData_ff_i_notEmpty____d55;
  tUInt8 DEF_mma_m_a_serverAdapter_cnt_3_whas____d14;
  tUInt8 DEF_mma_m_a_serverAdapter_cnt_2_whas____d12;
  tUInt8 DEF_mma_m_a_serverAdapter_cnt_1_whas____d11;
  tUInt8 DEF_mma_m_a_serverAdapter_outData_ff_i_notEmpty____d6;
  tUInt8 DEF_mma_m_b_serverAdapter_s1_4_BIT_0___d85;
  tUInt8 DEF_mma_m_a_serverAdapter_s1_6_BIT_0___d37;
  tUInt8 DEF_mma_row_a_idx_01_EQ_0___d102;
  tUInt8 DEF_mma_row_a_idx_01_EQ_0_02_OR_mma_m_c_i_notFull__03___d104;
  tUInt8 DEF_mma_m_a_serverAdapter_cnt_7_SLT_3___d100;
 
 /* Local definitions */
 private:
  tUInt8 DEF_x__h41288;
  tUWide DEF_tests_sub_test_number_89_PLUS_2_12___d913;
  tUWide DEF_tests_sub_test_number_89_PLUS_1_93___d594;
  tUWide DEF_tests_sub_test_number_89___d304;
  tUInt8 DEF_x__h134958;
  tUWide DEF_mma_row_c__h24913;
  tUWide DEF_mma_row_b__h40505;
  tUWide DEF_mma_row_a__h39777;
  tUWide DEF_mma_m_c_first____d910;
  tUWide DEF_mma_m_b_serverAdapter_outData_enqw_wget____d58;
  tUWide DEF_mma_m_b_serverAdapter_outData_ff_first____d135;
  tUWide DEF_mma_m_b_memory_read____d91;
  tUWide DEF_mma_m_a_serverAdapter_outData_enqw_wget____d9;
  tUWide DEF_mma_m_a_serverAdapter_outData_ff_first____d121;
  tUWide DEF_mma_m_a_memory_read____d43;
  tUWide DEF_IF_mma_m_b_serverAdapter_outData_ff_i_notEmpty_ETC___d137;
  tUWide DEF_IF_mma_m_b_serverAdapter_outData_enqw_whas__2__ETC___d136;
  tUWide DEF_IF_mma_m_a_serverAdapter_outData_ff_i_notEmpty_ETC___d123;
  tUWide DEF_IF_mma_m_a_serverAdapter_outData_enqw_whas_THE_ETC___d122;
  tUInt8 DEF__0_CONCAT_DONTCARE___d27;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_PLUS_1_93_94__ETC___d899;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_PLUS_1_93_94__ETC___d898;
  tUWide DEF_IF_mma_col_idx_42_EQ_15_43_THEN_SEL_ARR_mma_ro_ETC___d241;
  tUWide DEF_IF_mma_col_idx_42_EQ_15_43_THEN_SEL_ARR_mma_ro_ETC___d236;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_04_BITS_511_T_ETC___d891;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_04_BITS_511_T_ETC___d890;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_PLUS_1_93_94__ETC___d897;
  tUWide DEF_IF_mma_col_idx_42_EQ_15_43_THEN_SEL_ARR_mma_ro_ETC___d231;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_04_BITS_511_T_ETC___d889;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_PLUS_1_93_94__ETC___d896;
  tUWide DEF_IF_mma_col_idx_42_EQ_15_43_THEN_SEL_ARR_mma_ro_ETC___d226;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_04_BITS_511_T_ETC___d888;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_PLUS_1_93_94__ETC___d895;
  tUWide DEF_IF_mma_col_idx_42_EQ_15_43_THEN_SEL_ARR_mma_ro_ETC___d221;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_04_BITS_511_T_ETC___d887;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_PLUS_1_93_94__ETC___d894;
  tUWide DEF_IF_mma_col_idx_42_EQ_15_43_THEN_SEL_ARR_mma_ro_ETC___d216;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_04_BITS_511_T_ETC___d886;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_PLUS_1_93_94__ETC___d893;
  tUWide DEF_IF_mma_col_idx_42_EQ_15_43_THEN_SEL_ARR_mma_ro_ETC___d211;
  tUWide DEF_SEL_ARR_tests_sub_test_number_89_04_BITS_511_T_ETC___d885;
  tUInt8 DEF_test_number_89_QUOT_3___d290;
  tUInt32 DEF_x__h63587;
 
 /* Rules */
 public:
  void RL_inc_ctr();
  void RL_mma_m_a_serverAdapter_outData_enqueue();
  void RL_mma_m_a_serverAdapter_outData_dequeue();
  void RL_mma_m_a_serverAdapter_cnt_finalAdd();
  void RL_mma_m_a_serverAdapter_s1__dreg_update();
  void RL_mma_m_a_serverAdapter_stageReadResponseAlways();
  void RL_mma_m_a_serverAdapter_moveToOutFIFO();
  void RL_mma_m_a_serverAdapter_overRun();
  void RL_mma_m_b_serverAdapter_outData_enqueue();
  void RL_mma_m_b_serverAdapter_outData_dequeue();
  void RL_mma_m_b_serverAdapter_cnt_finalAdd();
  void RL_mma_m_b_serverAdapter_s1__dreg_update();
  void RL_mma_m_b_serverAdapter_stageReadResponseAlways();
  void RL_mma_m_b_serverAdapter_moveToOutFIFO();
  void RL_mma_m_b_serverAdapter_overRun();
  void RL_mma_load_row_a_store_row_c();
  void RL_mma_store_row_c_patch();
  void RL_mma_cache_row_a();
  void RL_mma_load_row_b();
  void RL_mma_cache_row_b();
  void RL_mma_compute();
  void RL_test_fsm_start_reg__dreg_update();
  void RL_test_fsm_state_handle_abort();
  void RL_test_fsm_state_fired__dreg_update();
  void RL_test_fsm_state_every();
  void RL_test_fsm_restart();
  void RL_test_fsm_action_l26c13();
  void RL_test_fsm_action_l31c16();
  void RL_test_fsm_action_l38c13();
  void RL_test_fsm_action_l43c16();
  void RL_test_fsm_action_l54c13();
  void RL_test_fsm_fsm_start();
  void RL_start();
  void __me_check_26();
  void __me_check_27();
  void __me_check_28();
  void __me_check_29();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTb &backing);
};

#endif /* ifndef __mkTb_h__ */
